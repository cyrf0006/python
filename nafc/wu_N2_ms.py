
'''
Script to develop a stratification index at Station 27.
Would be useful for capelin forecast model and to revisit Wu paper.

**N2, strat and MLd time series generated by azmp_stn27_density.py

Frederic.Cyr@dfo-mpo.gc.ca

'''
import os
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
## import xarray as xr
## import datetime
## import os
## import matplotlib.dates as mdates
## from matplotlib.ticker import NullFormatter
## from matplotlib.dates import MonthLocator, DateFormatter
## import cmocean
import gsw
import pylab as plb
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit
from scipy import asarray as ar,exp
from lmfit.models import LorentzianModel
from scipy.interpolate import interp1d
from scipy.optimize import curve_fit
from scipy import optimize
from datetime import timedelta


### *** NEED TO FORMALIZE N2 vs strat 

g = 9.81
rho_0 = 1025
doy_offset = 18
zmax = .03
REGION = '3LNO'
#depth_range = '5-50m'
#depth_range = '5-20m'
depth_range = '5-100m'
#depth_range = '5-100m'
#depth_range = '0-50m'
depth_range = '5-150m'

YLIM_lin = [0, .0003]
YLIM_log = [5e-8, 5e-4]
YLIM_log1 = [6e-5, 3.2e-4]

use_N2 = False #(otherwise use strat from density difference)
weekly_average= True
add_MLD = True
add_TS = True

if use_N2:
    df_N2 = pd.read_pickle('/home/cyrf0006/AZMP/state_reports/stn27/S27_N2_raw.pkl')
    if depth_range == '8-50m':
        df_strat = df_N2.iloc[:,7:50].mean(axis=1)
    elif depth_range == '5-50m':
        df_strat = df_N2.iloc[:,4:50].mean(axis=1)
    elif depth_range == '5-20m':
        df_strat = df_N2.iloc[:,4:20].mean(axis=1)
    elif depth_range == '5-100m':
        df_strat = df_N2.iloc[:,4:100].mean(axis=1)
    elif depth_range == '5-150m':
        df_strat = df_N2.iloc[:,4:150].mean(axis=1)
    elif depth_range == '8-100m':
        df_strat = df_N2.iloc[:,7:100].mean(axis=1)
    elif depth_range == '25-75m':
        df_strat = df_N2.iloc[:,24:5].mean(axis=1)
    elif depth_range == '5-175m':
        df_strat = df_N2.iloc.mean(axis=1)        
        
else:
    ## load Stn 27 data
    if depth_range == '8-50m':
        df_strat = pd.read_pickle('/home/cyrf0006/AZMP/state_reports/stn27/S27_stratif_raw.pkl')
    elif depth_range == '5-50m':
        df_strat = pd.read_pickle('/home/cyrf0006/AZMP/state_reports/stn27/S27_stratif_5-50_raw.pkl')
    elif depth_range == '5-20m':
        df_strat = pd.read_pickle('/home/cyrf0006/AZMP/state_reports/stn27/S27_stratif_5-20_raw.pkl')
    elif depth_range == '5-100m':
        df_strat = pd.read_pickle('/home/cyrf0006/AZMP/state_reports/stn27/S27_stratif_5-100_raw.pkl')
    elif depth_range == '5-150m':
        df_strat = pd.read_pickle('/home/cyrf0006/AZMP/state_reports/stn27/S27_stratif_5-150_raw.pkl')
    elif depth_range == '5-175m':
        df_strat = pd.read_pickle('/home/cyrf0006/AZMP/state_reports/stn27/S27_stratif_5-175_raw.pkl')
    elif depth_range == '25-75m':
        df_strat = pd.read_pickle('/home/cyrf0006/AZMP/state_reports/stn27/S27_stratif_25-75_raw.pkl')
    else:
        print('Missing strat file')

    df_strat = df_strat*g/rho_0
    
# Weekly average
if weekly_average:
    df_strat = df_strat.resample('W').mean()

# Stratification clim
df_doy = df_strat.copy()
df_doy = df_doy[(df_doy.index.year>=1991) & (df_doy.index.year<=2020)]
df_doy.index = df_doy.index.dayofyear
df_doy = df_doy.groupby('time').mean()
df_doy = df_doy.interpolate()

# load Stn 27 temp
if add_TS:
    CT = pd.read_pickle('/home/cyrf0006/AZMP/state_reports/stn27/S27_CT_raw.pkl')
    SA = pd.read_pickle('/home/cyrf0006/AZMP/state_reports/stn27/S27_SA_raw.pkl')
    # Weekly means
    if weekly_average:
        CT = CT.resample('W').mean()
        SA = SA.resample('W').mean()
    # Calculate T-S stratificaiton
    alpha = gsw.alpha(SA,CT,SA.columns)
    beta = gsw.beta(SA,CT,SA.columns)
    if depth_range == '5-10m':
        alpha = alpha[:,4:10].mean(axis=1)
        beta = beta[:,4:10].mean(axis=1)
        strat_T = -alpha*g*(CT.iloc[:,10] - CT.iloc[:,4])/5
        strat_S = beta*g*(SA.iloc[:,10] - SA.iloc[:,4])/5
    elif depth_range == '5-50m':
        alpha = alpha[:,4:50].mean(axis=1)
        beta = beta[:,4:50].mean(axis=1)
        strat_T = -alpha*g*(CT.iloc[:,50] - CT.iloc[:,4])/45
        strat_S = beta*g*(SA.iloc[:,50] - SA.iloc[:,4])/45    
    elif depth_range == '40-60m':
        alpha = alpha[:,39:60].mean(axis=1)
        beta = beta[:,39:60].mean(axis=1)
        strat_T = -alpha*g*(CT.iloc[:,60] - CT.iloc[:,39])/20
        strat_S = beta*g*(SA.iloc[:,60] - SA.iloc[:,39])/20    
    elif depth_range == '5-150m':
        alpha = alpha[:,4:150].mean(axis=1)
        beta = beta[:,4:150].mean(axis=1)
        strat_T = -alpha*g*(CT.iloc[:,150] - CT.iloc[:,4])/145
        strat_S = beta*g*(SA.iloc[:,150] - SA.iloc[:,4])/145    

# Calculate N_T, N_S
Ts_doy = strat_T.copy()
Ss_doy = strat_S.copy()
Ts_doy = Ts_doy[(Ts_doy.index.year>=1991) & (Ts_doy.index.year<=2020)]
Ss_doy = Ss_doy[(Ss_doy.index.year>=1991) & (Ss_doy.index.year<=2020)]
# Interpolate T
Ts_doy.index = Ts_doy.index.dayofyear
Ts_doy = Ts_doy.groupby('time').mean()
#Ts_doy = np.sqrt(Ts_doy) # squareroot
Ts_doy = Ts_doy.interpolate()
# Interpolate S
Ss_doy.index = Ss_doy.index.dayofyear
Ss_doy = Ss_doy.groupby('time').mean()
#Ss_doy = np.sqrt(Ss_doy) # squareroot
Ss_doy = Ss_doy.interpolate()
        
## Load bloom params
#bloom = pd.read_csv('SpringBloom_parameters.csv')
bloom = pd.read_csv('BloomFitParams_Wu revisited_15Jun2021.csv')
bloom.set_index('Year', inplace=True)

## Load MDL data
df_MLD = pd.read_pickle('/home/cyrf0006/AZMP/state_reports/stn27/S27_MLD_raw.pkl')
if weekly_average:
    df_MLD = df_MLD.resample('W').mean()

# Load bloom timing
bloomt = pd.read_csv('MeanTimingMax.csv')
bloomt.set_index('Region', inplace=True)
doy = bloomt.loc[REGION]
init = pd.to_datetime(1900 * 1000 + doy.meanIniation, format='%Y%j')
init_low = init - timedelta(days=doy['sdIni'])
init_high = init + timedelta(doy['sdIni'])
max = pd.to_datetime(1900 * 1000 + doy.meanMax, format='%Y%j')
max_low = max - timedelta(days=doy['sdMax'])
max_high = max + timedelta(doy['sdMax'])
    
    
## ---- Stratification Climatology Figure ---- ##
plt.close('all')
fig, (ax0, ax1) = plt.subplots(nrows=2, ncols=1)

## ax0
# Stratification
df_doy.plot(linestyle=' ', marker='.', ax=ax0)    
df_doy.rolling(30, center=True).mean().plot(linestyle='-', linewidth=3, color='orange', ax=ax0)
#ax0.set_ylabel(r'$\rm d \sigma_0 / dz (kg m^{-4})$', color='orange')
ax0.set_ylabel(r'$\rm log_{10}(\tilde{N}^2 ~/~ s^{-2})$', color='orange')
ax0.set_xlabel('DOY')
# Bloom timing
ax0.fill_between([init_low.dayofyear, init_high.dayofyear], [YLIM_log1[0], YLIM_log1[0]], [YLIM_log1[1], YLIM_log1[1]], facecolor='green', interpolate=True , alpha=.3)
max = pd.to_datetime(1900 * 1000 + doy.meanMax, format='%Y%j')
max_low = max - timedelta(days=doy['sdMax'])
max_high = max + timedelta(doy['sdMax'])
ax0.set_ylim(YLIM_log1)
ax0.fill_between([max_low.dayofyear, max_high.dayofyear], [YLIM_log1[0], YLIM_log1[0]], [YLIM_log1[1], YLIM_log1[1]], facecolor='red', interpolate=True , alpha=.3)
ax0.grid()
ax0.set_yscale('log')
ax0.text(0, 3.4e-4, 'a', fontsize=14, fontweight='bold')
# MLD
mld_doy = df_MLD.copy()
mld_doy = mld_doy[(mld_doy.index.year>=1991) & (mld_doy.index.year<=2020)]
mld_doy.index = mld_doy.index.dayofyear
mld_doy = mld_doy.groupby('time').mean()
mld_doy = mld_doy.interpolate()
ax01 = ax0.twinx()
mld_doy.plot(ax=ax01, linestyle=' ', marker='.', color='cyan')    
mld_doy.rolling(30, center=True).mean().plot(ax=ax01, linestyle='-', linewidth=3, color='darkgray')
ax01.set_ylabel('MLD (m)', color='darkgray')
ax01.invert_yaxis()

## ax1
df_doy.rolling(30, center=True).mean().plot(linestyle='-', linewidth=3, color='orange', ax=ax1)
Ts_doy.rolling(30, center=True).mean().plot(linestyle='-', linewidth=3, color='red', ax=ax1)
Ss_doy.rolling(30, center=True).mean().plot(linestyle='-', linewidth=3, color='blue', ax=ax1)
ax1.fill_between([init_low.dayofyear, init_high.dayofyear], [YLIM_log[0], YLIM_log[0]], [YLIM_log[1], YLIM_log[1]], facecolor='green', interpolate=True , alpha=.3)
ax1.fill_between([max_low.dayofyear, max_high.dayofyear], [YLIM_log[0], YLIM_log[0]], [YLIM_log[1], YLIM_log[1]], facecolor='red', interpolate=True , alpha=.3)
ax1.set_ylabel(r'$\rm log_{10}(\tilde{N}^2,\tilde{N}^2_T, \tilde{N}^2_S  ~/~ s^{-2})$')
#ax1.set_ylabel(r'$log_{10}(N, N_T, N_S~/~s^{-1})$', color='black')
ax1.set_xlabel('DOY')
ax1.set_yscale('log')
ax1.set_ylim(YLIM_log)
ax1.grid()
ax1.text(0, 5.8e-4, 'b', fontsize=14, fontweight='bold')

# Tweak dates
## pd.to_datetime(a[1:-1], format='%j')        
## pd.to_datetime(df['year'] * 1000 + df['doy'], format='%Y%j')

# Save Figure
fig.set_size_inches(w=8, h=6)
outfile_year = 'Climatological_strat_ms.png'
fig.savefig(outfile_year, dpi=200)
os.system('convert -trim ' + outfile_year + ' ' + outfile_year)

