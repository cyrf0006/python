'''
Script to develop a stratification index at Station 27.
Would be useful for capelin forecast model and to revisit Wu paper.

**N2, strat and MLd time series generated by azmp_stn27_density.py

Frederic.Cyr@dfo-mpo.gc.ca

'''
import os
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
## import xarray as xr
## import datetime
## import os
## import matplotlib.dates as mdates
## from matplotlib.ticker import NullFormatter
## from matplotlib.dates import MonthLocator, DateFormatter
## import cmocean
## import gsw
import pylab as plb
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit
from scipy import asarray as ar,exp
from lmfit.models import LorentzianModel
from scipy.interpolate import interp1d
from scipy.optimize import curve_fit

zmax = 0.05
REGION = '3LNO'
#depth_range = '5-50m'
#depth_range = '5-20m'
depth_range = '8-50m'
#depth_range = '5-100m'


# Gaussian function
def gaus(x,a,x0,sigma,off):
    return a*exp(-(x-x0)**2/(2*sigma**2))+off

# Function to calculate the exponential with constants a and b
def exponential(x, a, b):
    return a*np.exp(b*x)

# Logistic curve fitting
def logifunc(x,A,x0,k,off):
    return A / (1 + np.exp(-k*(x-x0)))+off

## load Stn 27 data
df_N2 = pd.read_pickle('/home/cyrf0006/AZMP/state_reports/stn27/S27_N2_raw.pkl')
df_MLD = pd.read_pickle('/home/cyrf0006/AZMP/state_reports/stn27/S27_MLD_raw.pkl')
if depth_range == '8-50m':
    df_strat = pd.read_pickle('/home/cyrf0006/AZMP/state_reports/stn27/S27_stratif_raw.pkl')
elif depth_range == '5-50m':
    df_strat = pd.read_pickle('/home/cyrf0006/AZMP/state_reports/stn27/S27_stratif_5-50_raw.pkl')
elif depth_range == '5-20m':
    df_strat = pd.read_pickle('/home/cyrf0006/AZMP/state_reports/stn27/S27_stratif_5-20_raw.pkl')
elif depth_range == '5-100m':
    df_strat = pd.read_pickle('/home/cyrf0006/AZMP/state_reports/stn27/S27_stratif_5-100_raw.pkl')
elif depth_range == '25-75m':
    df_strat = pd.read_pickle('/home/cyrf0006/AZMP/state_reports/stn27/S27_stratif_25-75_raw.pkl')
        
df_N2.to_csv('S27_N2_timeseries.csv', float_format='%.4f', index=True)
df_MLD.to_csv('S27_MLD_timeseries.csv', float_format='%.4f', index=True)
df_strat.to_csv('S27_strat_timeseries.csv', float_format='%.4f', index=True)
# alternative stratification timeseries
df_N2.iloc[:,4:100].mean(axis=1).to_csv('S27_N2_timeseries_5-100m.csv', float_format='%.4f', index=True)
df_N2.iloc[:,4:50].mean(axis=1).to_csv('S27_N2_timeseries_5-50m.csv', float_format='%.4f', index=True)


# Weekly average
df_strat = df_strat.resample('W').mean()


## Load bloom params
#bloom = pd.read_csv('SpringBloom_parameters.csv')
bloom = pd.read_csv('BloomFitParams_Wu revisited_15Jun2021.csv')
bloom.set_index('Year', inplace=True)
# To only plot one region at a time (comment for all regions)
#bloom = bloom[bloom.Region==REGION]
# Modis vs SeaWiFS
#bloom_modis = bloom[bloom.Sensor=='Modis 4km']

    
## Gaussian Fit.
years = np.arange(1998, 2017)
bloom_predict = years*np.nan
bloom_predict2 = years*np.nan

for iyear, year in enumerate(years):
    print(str(year))
    # Get annual values
    df = df_strat[df_strat.index.year==year]
    df.dropna(inplace=True)
    df.sort_index(inplace=True)
    df.index = df.index.dayofyear
    df = df.groupby('time',as_index=True).mean()
    x = df.index.values
    y = df.values
    xi = np.arange(x.min(), x.max())
    xi_mid = np.arange(x.min()+.5, x.max()-.5)
    
    # Fit Gaussian
    #n = len(x)                          #the number of data
    #mean = sum(x*y)/n                   #note this correction
    #sigma = sum(y*(x-mean)**2)/n        #note this correction
    mean=200
    sigma=50
    popt,pcov = curve_fit(gaus,x,y,p0=[1,mean,sigma,0.01], maxfev=1000)

    # Spline fitting
    #spline = interp1d(x, y, kind='cubic')
    
    # Fit Lorentzian
    model = LorentzianModel()
    params = model.guess(y, x=x)
    result = model.fit(y, params, x=x)

    # Logistic function
    x2 = x.copy()
    y2 = y.copy()
    y2[y.argmax():] = y.max() 
    popt2, pcov2 = curve_fit(logifunc, x2, y2, p0=[300,150,0.1,0])

    x3 = x.copy()
    y3 = y.copy()
    p = np.polyfit(x3, y3, 3)

    #result.plot_fit()
    plt.close('all')
    fig, ax = plt.subplots(nrows=1, ncols=1)
    plt.plot(x,y,'b+:',label='data')
    #df.rolling(10, center='true').mean().plot()
    plt.plot(xi,gaus(xi,*popt),'r-',label='gaussian')
    plt.plot(xi, logifunc(xi, *popt2), 'c-',label='logistic')
    plt.plot(xi, np.polyval(p,xi), 'm-',label='polyfit')
    #    plt.plot(xi,spline(xi),'go:',label='spline')
    B = bloom.loc[year]
    # To only plot one region at a time (comment for all regions)
    B = B[B.Region==REGION]
    try:
        TMP_b = B[B.Sensor=='MODIS 4km']
        Rb = TMP_b.Region
        m = B[B.Sensor=='MODIS 4km']['t[start]'].values
        for i, r in enumerate(Rb):
            plt.plot([m[i],m[i]],[0,zmax], '--k')
            plt.text(m[i], zmax, r, verticalAlignment='bottom', horizontalAlignment='center')
    except:
        print(' -> No MODIS')

    try:
        TMP_v = B[B.Sensor=='SeaWiFS 4km']
        Rv = TMP_v.Region
        v = B[B.Sensor=='SeaWiFS 4km']['t[start]'].values
        for i, r in enumerate(Rv):
            plt.plot([v[i],v[i]],[0,zmax], '--b')
            plt.text(v[i], zmax, r, verticalAlignment='bottom', horizontalAlignment='center', color='b')
    except:
        print(' -> No SeaWiFS')        

    # Add detection threshold
    # Gauss
    yi = gaus(xi,*popt)
    dy = np.diff(yi)
    predict = xi_mid[dy>1e-5][0]
    plt.plot([predict, predict],[0,zmax], 'r')
    bloom_predict[iyear] = predict
    # Logistic
    yi2 = logifunc(xi, *popt2)
    dy2 = np.diff(yi2)
    predict2 = xi_mid[dy2>1e-5][0]
    plt.plot([predict2, predict2],[0,zmax], 'c')
    bloom_predict2[iyear] = predict2
    
    
    plt.legend()
    plt.title('Fit on stratification - ' + str(year))
    plt.xlabel('doy')
    plt.ylabel('drho/dz')
    plt.grid()
    # Save Figure
    fig.set_size_inches(w=12, h=6)
    outfile_year = 'Stratif_bloom_' + str(year) + '_' + REGION + '_' + depth_range + '.png'
    fig.savefig(outfile_year, dpi=200)
    os.system('convert -trim ' + outfile_year + ' ' + outfile_year)


# Save prediction
df_predict = pd.DataFrame(bloom_predict, index=years, columns=['predict'])
df_predict.index.name='Year'

df_predict.to_csv('bloom_predict_gaussian_' + REGION + '_' + depth_range + '.csv')    


## ---- Correlation with prediction ---- ##
## Select Region
bloom = bloom[bloom.Region==REGION]
# Select sensors
df_predict['Modis'] = bloom[bloom.Sensor=='MODIS 4km']['t[start]']
df_predict['SeaWiFS'] = bloom[bloom.Sensor=='SeaWiFS 4km']['t[start]']

# Drop some years (late occupation)
df_predict.drop(1999, inplace=True)

# Correlation
corr = df_predict.corr()

# plot
plt.close('all')
fig, ax = plt.subplots(nrows=1, ncols=1)
df_predict.plot(ax=ax)
ax.grid()
ax.text(2004, 105, 'corr with Modis = ' + str(np.round(corr.iloc[0,1],3)))
ax.text(2004, 95, 'corr with SeaWiFS = ' + str(np.round(corr.iloc[0,2],3)))
plt.ylabel('bloom init (doy)')
# Save Figure
fig.set_size_inches(w=12, h=6)
outfile_year = 'Predict_bloom_gauss' + REGION + '_' + depth_range + '.png'
fig.savefig(outfile_year, dpi=200)
os.system('convert -trim ' + outfile_year + ' ' + outfile_year)
